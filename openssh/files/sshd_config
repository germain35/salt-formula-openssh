{%- from "openssh/map.jinja" import openssh with context -%}

# generated by salt

{% if openssh.server.binds is defined %}
  {%- for bind in openssh.server.binds %}
ListenAddress {{ bind.address }}:{{ bind.port }}
  {%- endfor %}
{%- else %}
Port {{ openssh.server.bind.port }}
ListenAddress {{ openssh.server.bind.address }}
{%- endif %}

Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
{%- if grains.os_family != 'CentOS' %}
HostKey /etc/ssh/ssh_host_ecdsa_key
{%- endif %}

UsePrivilegeSeparation {% if openssh.server.get('privilege_separation') %}{{openssh.server.privilege_separation}}{% else %}no{% endif %}

KeyRegenerationInterval {{ openssh.server.get('key_regeneration_interval') }}

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication:
LoginGraceTime 120

PermitRootLogin {{ openssh.server.get('permit_root_login') }}
StrictModes yes

PubkeyAuthentication {% if openssh.server.get('public_key_auth') %}yes{% else %}no{% endif %}
AuthorizedKeysFile     %h/.ssh/authorized_keys

{%- if openssh.server.authorized_keys_command is defined %}
AuthorizedKeysCommand {{ openssh.server.authorized_keys_command.command }}
{%- if (grains['os_family'] == 'RedHat' and grains['osmajorrelease'] != '6') or grains['os_family'] != 'RedHat' %}
{%- if openssh.server.authorized_keys_command.user is defined %}
AuthorizedKeysCommandUser {{ openssh.server.authorized_keys_command.get('User', 'nobody') }}
{%- endif %}
{%- endif %}
{%- endif %}

{%- if openssh.server.force_command is defined %}
ForceCommand {{ openssh.server.force_command }}
{%- endif %}

{%- if openssh.server.get('deny_users', False) %}
DenyUsers {{ openssh.server.deny_users|join(' ') }}
{%- endif %}
{%- if openssh.server.get('allow_users', False) %}
AllowUsers {{ openssh.server.allow_users|join(' ') }}
{%- endif %}
{%- if openssh.server.get('deny_groups', False) %}
DenyGroups {{ openssh.server.deny_groups|join(' ') }}
{%- endif %}
{%- if openssh.server.get('allow_groups', False) %}
AllowGroups {{ openssh.server.allow_groups|join(' ') }}
{%- endif %}

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes

HostbasedAuthentication {% if openssh.server.get('host_auth', False) %}yes{% else %}no{% endif %}

PermitEmptyPasswords no

ChallengeResponseAuthentication no

PasswordAuthentication {% if openssh.server.get('password_auth') %}yes{% else %}no{% endif %}

# Kerberos options
{%- if openssh.server.get('kerberos_auth', False) %}
KerberosAuthentication yes
{%- else %}
KerberosAuthentication no
{%- endif %}

# GSSAPI options
{%- if openssh.server.get('gssapi_auth', False) %}
GSSAPIAuthentication yes
{%- else %}
GSSAPIAuthentication no
{%- endif %}

{%- if openssh.server.use_dns is defined %}
UseDNS {{ openssh.server.use_dns }}
{%- endif %}
X11Forwarding {% if openssh.server.get('x11', {}).get('forwarding', True) %}yes{% else %}no{% endif %}
X11DisplayOffset {{ openssh.server.get('x11', {}).get('display_offset', '10') }}
PrintMotd {% if openssh.server.get('print_motd', False) %}yes{% else %}no{% endif %}
PrintLastLog {% if openssh.server.get('print_lastlog', True) %}yes{% else %}no{% endif %}
AllowTcpForwarding {% if openssh.server.get('tcp_forwarding', True) %}yes{% else %}no{% endif %}
TCPKeepAlive {{ openssh.server.get('alive', {}).get('keep','yes') }}

{%- if openssh.server.get('alive', {'interval': None}).interval is number %}
ClientAliveInterval {{ openssh.server.alive.interval }}
{%- endif %}
{%- if openssh.server.get('alive', {'count': None}).count is number %}
ClientAliveCountMax {{ openssh.server.alive.count }}
{%- endif %}

MaxSessions {{ openssh.server.get('max_sessions', 10) }}
{%- if openssh.server.max_startups is defined %}
MaxStartups {{ openssh.server.max_startups }}
{%- endif %}

{%- if openssh.server.banner is defined %}
Banner /etc/banner
{%- else %}
#Banner /etc/banner
{%- endif %}

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*
{%- if openssh.server.get('accept_env', [])|length > 0 %}
AcceptEnv {{ openssh.server.accept_env|join(' ') }}
{%- endif %}

Subsystem sftp {{ openssh.server.lib_dir }}/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

{%- if openssh.server.get('dss_enabled', false) %}
PubkeyAcceptedKeyTypes=+ssh-dss
{%- endif %}
